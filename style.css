*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "League Spartan", sans-serif;
}

:root {
  --dk-violet: hsl(268, 75%, 9%);
  --lt-violet: hsl(268, 47%, 21%);
  --lt-violet2: hsl(281, 89%, 26%);
  --vb-violet: hsl(285, 91%, 52%);
  --vb-violet2: hsl(290, 70%, 36%);

  --vb-yellow: hsl(52, 100%, 62%);

  --pl-white: hsl(0, 0%, 100%);

  --vb-cyan: hsl(176, 100%, 44%);
  --vb-cyan2: hsl(177, 92%, 70%);
  --dk-text: hsl(198, 20%, 13%);
}

.wrapper {
  width: 100vw;
  height: 100vh;
  background: linear-gradient(
    231deg,
    rgba(22, 6, 40, 1) 0%,
    rgba(52, 28, 79, 1) 50%,
    rgba(88, 7, 125, 1) 100%
  );
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.container {
  width: 90%;
  max-width: 450px;
}

h1 {
  color: var(--pl-white);
  opacity: 0.75;
  text-transform: uppercase;
  letter-spacing: 2px;
  line-height: 1.2;
  text-align: center;
}

.display-container {
  position: relative;
  background-color: var(--dk-violet);
  border-radius: 1rem;
  border-bottom: 0.35rem solid var(--lt-violet2);
  margin: 1rem 0;
  padding-top: 0.35rem;
  border: none;
  outline: none;
}

.display {
  width: 100%;
  background-color: transparent;
  padding: 1.15rem 1rem;
  color: var(--vb-yellow);
  font-weight: 600;
  font-size: 1.5rem;
  line-height: 30px;
  letter-spacing: 1px;
  padding-right: 3.25rem;
  border: none;
}

.display::placeholder {
  position: absolute;
  top: 50%;
  left: 1.5rem;
  font-size: 1.5rem;
  line-height: 30px;
  color: var(--vb-yellow);
  opacity: 0.65;
  text-transform: uppercase;
  transform: translateY(-50%);
}

.display-container button {
  position: absolute;
  top: 50%;
  right: 1.5rem;
  transform: translateY(-50%);
}

.input-container {
  width: 100%;
  background-color: var(--dk-violet);
  border-radius: 1rem;
  padding: 2rem; /*padding making content bos size reduced by maintaining input container box size same*/
  border-bottom: 0.35rem solid var(--lt-violet2);
}

.length-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.length-container p:nth-child(1) {
  color: var(--pl-white);
  font-size: 1.5rem;
}

.length-container p:nth-child(2) {
  color: var(--vb-yellow);
  font-size: 1.5rem;
}

.strength-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1.75rem;
  margin-bottom: 2rem;
}

.strength-container p {
  color: var(--pl-white);
  font-size: 1.5rem;
}
.indicator {
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 50%;
}

.generateButton {
  width: 100%;
  padding: 1rem 0;
  background-color: var(--vb-violet);
  text-align: center;
  border-radius: 0.75rem;
  border-bottom: 0.35rem solid var(--vb-yellow);
  text-transform: uppercase;
  letter-spacing: 1px;
  color: var(--vb-yellow);
  font-weight: 600;
  font-size: 1.25rem;
  cursor: pointer;
}

.check {
  display: flex;
  align-items: center;
  margin: 1rem 0;
  gap: 0 1rem;
}

.check input {
  appearance: none; /*it removes the default style/appearance*/
  width: 20px;
  height: 20px;
  border: 1px solid var(--vb-cyan);
  cursor: pointer;
  border-radius: 0.35rem;
  position: relative;
}

/*below line means;=> if .check input is checked*/
.check input:checked {
  /*if check input is checked then apply css*/
  background-color: var(--vb-cyan);
}

/* This pseudo-element is often used to
 insert content before the content of the selected element. */
.check input:checked::before {
  /*checked is attributes*/
  /*before->pseudo element selector*/
  content: "âœ”";
  position: absolute;
  color: var(--dk-text);
  font-size: 1.05rem;
  font-weight: 600;
  left: 50%;
  top: -3.5px;
  transform: translateX(-50%);
}

.check label {
  color: var(--pl-white);
  font-size: 1.25rem;
  letter-spacing: 0.75px;
}

.slider {
  width: 100%;
  height: 0.75rem;
  appearance: none;
  cursor: pointer;
  background-color: var(--lt-violet);
  border-radius: 1rem;
  margin-top: 2rem;
  margin-bottom: 1.5rem;
  background-image: linear-gradient(var(--vb-violet), var(--vb-violet));
  background-repeat: no-repeat;
  border: none;
  outline: none;
}

/*access thumb of slider*/
.slider::-webkit-slider-thumb {
  /*pseudo element selector-> webkit-slider-thumb*/
  appearance: none;
  width: 2rem;
  height: 2rem;
  border-radius: 50%;
  background-color: var(--vb-yellow);
  cursor: pointer;
  margin-top: -3px;
  box-shadow: 0px 0px 20px 0px rgba(255, 229, 61, 0.5);
  transition: all 100ms ease-in;
  position: relative;
}

.slider:focus {
  outline: 3px solid var(--vb-yellow);
  /* outline doesnt affect layout, means it adds outline around layout  */
  /*while border affects layout, means it adds border in layout*/
}

.slider::-webkit-slider-thumb:hover {
  outline: 2px solid var(--vb-yellow);
  background-color: var(--dk-violet);
  box-shadow: 0px 0px 25px 5px rgba(255, 229, 61, 0.8);
}

.copyBtn {
  background-color: transparent;
  border: none;
  cursor: pointer;
}

.tooltip {
  position: absolute;
  background-color: var(--vb-violet2);
  color: var(--vb-yellow);
  font-size: 1.25rem;
  top: -35px;
  left: -25px;
  padding: 5px 10px;
  border-radius: 1rem;
  opacity: 0; /* Sets the initial opacity of the tooltip to 0, making it invisible.*/
  transform: scale(
    0
  ); /*Sets the initial scale of the tooltip to 0, effectively hiding it. When the transform-origin property is 
    set to bottom, it refers to the bottom edge of the element itself. The "center" part of bottom center refers to the horizontal center of the element along its bottom edge.*/
  transform-origin: bottom; /*This sets the origin point of the transformation to the bottom center of the element.*/
  transition: all 250ms ease-in-out;
}

/*This class is applied to the tooltip element when it is active, */
.tooltip.active {
  /*when tooltip will be active then opacity will be 1*/
  opacity: 1;
  transform: scale(
    1
  ); /* Scales the tooltip to its original size (scale of 1), making it visible.*/
}

.copyImg
{
    cursor: pointer;
}